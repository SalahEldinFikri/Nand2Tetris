// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	Not16 (in=x, out=nota);
	Not16 (in=y, out=notb);

	//nx ny zx zy
	Mux16 (a=x ,b=false ,sel=zx ,out=c1);
	Mux16 (a=y ,b=false ,sel=zy ,out=c2);
	Mux16 (a=x ,b=nota ,sel=nx ,out=c3);
	Mux16 (a=y ,b=notb ,sel=ny ,out=c4);
	
	
	Add16 (a=c1, b=c2 ,out=add1);
	Add16 (a=c1, b=c4 ,out=add2);
	Add16 (a=c3, b=c2 ,out=add3);
	Add16 (a=c3, b=c4 ,out=add4);

	And16 (a=c1, b=c2 ,out=and1);
	And16 (a=c1, b=c4 ,out=and2);
	And16 (a=c3, b=c2 ,out=and3);
	And16 (a=c3, b=c4 ,out=and4);

	//f==1 || f==0
	Mux16 (a=add1 ,b=and1 ,sel=f ,out=c5);
	Mux16 (a=add2 ,b=and2 ,sel=f ,out=c6);
	Mux16 (a=add3 ,b=and3 ,sel=f ,out=c7);
	Mux16 (a=add4 ,b=and4 ,sel=f ,out=c8);

	Not (in=c5, out=notc5);
	Not (in=c6, out=notc6);
	Not (in=c7, out=notc7);
	Not (in=c8, out=notc8);
	
	//no==0 || no==1
	Mux16 (a=c5, b=notc5, sel=no, out=out);
	Mux16 (a=c6, b=notc6, sel=no, out=out);
	Mux16 (a=c7, b=notc7, sel=no, out=out);
	Mux16 (a=c8, b=notc8, sel=no, out=out);

	//zr
	Mux16 (a=false, b=true, sel=c9, out=zr);
	Mux16 (a=false, b=true, sel=c10, out=zr);
	Mux16 (a=false, b=true, sel=c11, out=zr);
	Mux16 (a=false, b=true, sel=c12, out=zr);
	
	//ng
	Mux16 (a=false, b=true, sel=c9, out=ng);
	Mux16 (a=false, b=true, sel=c10, out=ng);
	Mux16 (a=false, b=true, sel=c11, out=ng);
	Mux16 (a=false, b=true, sel=c12, out=ng);

	

	
}




// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	Add (a=x[0], b=y[0],out=and1);
	Or (a=x[0], b=y[0],out=or1);
	FullAdder (a=x[0] ,b=y[0] ,c=false ,sum=f1 ,carry=c1)
	Mux (a=and1, b=or1, sel=f1,out=[0]);
	
	Add (a=x[0], b=y[0],out=and1);
	Or (a=x[0], b=y[0],out=or1);
	FullAdder (a=x[0] ,b=y[0] ,c=false ,sum=f1 ,carry=c1)
	Mux (a=and1, b=or1, sel=f1,out=[0]);


	
}